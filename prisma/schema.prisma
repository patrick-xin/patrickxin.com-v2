generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)


}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role     Role      @default(VISTOR)
  comment  Comment[]
}

enum Role {
  VISTOR
  ADMIN
}

model Post {
  id         String    @id @default(cuid())
  slug       String    @unique
  view_count Int       @default(value: 0)
  like_count Int       @default(value: 0)
  updatedAt  DateTime  @updatedAt
  comments   Comment[]
  category   String    @default("web")
}

model Comment {
  id             String               @id @default(cuid())
  post           Post                 @relation(fields: [postSlug], references: [slug])
  postSlug       String
  createdAt      DateTime             @default(now())
  content        String
  notification   CommentNotification?
  notificationId String?
  reply          Reply?               @relation(fields: [replyId], references: [id])
  replyId        String?              @unique
  user           User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?

}

model Reply {
  id        String   @id @default(cuid())
  by        String
  to        String
  content   String
  comment   Comment?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CommentNotification {
  id        String   @id @default(cuid())
  isRead    Boolean
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @unique
}